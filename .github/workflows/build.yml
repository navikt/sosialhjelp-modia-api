name: Build
on:
  push:
    branches:
      - '**' # Build all branches
    tags-ignore:
      - '**' # Don't build any tags

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: '11.0.2'
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Build and run tests
        run: ./gradlew clean build

  build:
    name: Build and push docker image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: '11.0.2'
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
#      - name: Test and build
#        run: ./gradlew test build
#      - uses: actions/upload-artifact@master
#        with:
#          name: test-results
#          path: build/test-results
#      - uses: actions/upload-artifact@master
#        with:
#          name: build-libs
#          path: build/libs
      - name: Build JAR
        run: ./gradlew clean build shadowJar -x test
      - name: Login to GitHub package registry
        run: |
          echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_REPOSITORY} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create artifact version
        id: artifact-version
        uses: navikt/sosialhjelp-ci/actions/create-artifact-version@master
      - name: Create docker image tags
        run: |
          PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d/ -f2)-2
          echo "docker.pkg.github.com/$GITHUB_REPOSITORY/$PROJECT_NAME:$VERSION" > DOCKER_TAG
        env:
          VERSION: ${{ steps.artifact-version.outputs.version }}
#      - uses: actions/download-artifact@master
#        with:
#          name: build-libs
#          path: .
      - name: Build docker image
        run: docker build -t $(cat DOCKER_TAG) .
      - name: Create tag and release
        # TODO: Bytt ut med upstream når/hvis https://github.com/actions/create-release/pull/32 merges
        uses: fleskesvor/create-release@feature/support-target-commitish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.artifact-version.outputs.version }}
          release_name: ${{ steps.artifact-version.outputs.version }}
          commitish: ${{ github.sha }}
      - name: Push docker image
        run: |
          cat DOCKER_TAG
          docker push $(cat DOCKER_TAG)

#  release:
#    name: Release docker image
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - name: Login to GitHub package registry
#        run: |
#          echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_REPOSITORY} --password-stdin docker.pkg.github.com
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Create artifact version
#        id: artifact-version
#        uses: navikt/sosialhjelp-ci/actions/create-artifact-version@master
#      - name: Create docker image tags
#        run: |
#          PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d/ -f2)-2
#          echo "docker.pkg.github.com/$GITHUB_REPOSITORY/$PROJECT_NAME:$VERSION" > DOCKER_TAG
#        env:
#          VERSION: ${{ steps.artifact-version.outputs.version }}
#      - uses: actions/download-artifact@master
#        with:
#          name: build-libs
#          path: .
#      - name: Build docker image
#        run: docker build -t $(cat DOCKER_TAG) .
#      - name: Create tag and release
#        # TODO: Bytt ut med upstream når/hvis https://github.com/actions/create-release/pull/32 merges
#        uses: fleskesvor/create-release@feature/support-target-commitish
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.artifact-version.outputs.version }}
#          release_name: ${{ steps.artifact-version.outputs.version }}
#          commitish: ${{ github.sha }}
#      - name: Push docker image
#        run: |
#          cat DOCKER_TAG
#          docker push $(cat DOCKER_TAG)
