version: 2

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: Create workspace
          command: mkdir -p /tmp/workspace
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
      - run:
          name: test and build
          command: ./gradlew test build
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - run:
          name: Copy jars to workspace
          command: cp build/libs/*.jar /tmp/workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths: "*.jar"

  release:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: GitHub package registry login
          command: |
            echo "$DEPLOYMENT_PASSWORD" | docker login -u "$DEPLOYMENT_USERNAME" --password-stdin docker.pkg.github.com
      - run:
          name: Checkout CI scripts
          command: |
            git clone https://github.com/navikt/github-apps-support.git
            git clone https://github.com/navikt/sosialhjelp-ci.git
            echo "export PATH=\"`pwd`/github-apps-support/bin:`pwd`/sosialhjelp-ci/bin:$PATH\"" >> $BASH_ENV
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy jar to expected path
          command: |
            cp /tmp/workspace/*.jar .
      - run:
          name: Generate version number and docker image tags
          command: |
            VERSION=$(create-artifact-version.sh)
            echo "export DOCKER_TAG=\"docker.pkg.github.com/navikt/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$VERSION\"" >> $BASH_ENV
      - run:
          name: Build docker image
          command: docker build -t $DOCKER_TAG .
      - run:
          name: Create tag and release
          command: |
            echo $DIGISOS_KEY | tr '_' '\n' > digisos.key
            GH_TOKEN=$(generate-installation-token.sh `generate-jwt.sh digisos.key $DIGISOS_APPID`)
            rm digisos.key

            create-github-release.sh -p $CIRCLE_PROJECT_REPONAME -t $(create-artifact-version.sh) \
            -c $CIRCLE_SHA1 -m "$(format-commit-message.sh)" -a $GH_TOKEN
      - run:
          # Push the image to Docker Packages, can also be used against dockerhub by omitting docker.pkg.github.com
          name: Docker push
          command: |
            echo $DOCKER_TAG
            docker push $DOCKER_TAG

  deploy_miljo:
    docker:
      - image: navikt/deployment:v1
    steps:
      - checkout
      - run:
          name: Deploy til miljÃ¸ i dev-fss
          command: |
            git clone https://github.com/navikt/sosialhjelp-ci.git
            yq w "nais/dev/${MILJO}.json" version "$(sosialhjelp-ci/bin/create-artifact-version.sh)" > deployment.yaml
            /app/deploy \
                --apikey="$NAIS_DEPLOY_APIKEY" \
                --cluster="dev-fss" \
                --repository="$CIRCLE_PROJECT_REPONAME" \
                --resource="nais.yaml" \
                --vars="deployment.yaml" \
                --wait=true

  deploy_prod:
    docker:
      - image: navikt/deployment:v1
    steps:
      - checkout
      - run:
          name: Deploy til prod
          command: |
            git clone https://github.com/navikt/sosialhjelp-ci.git
            yq w "nais/prod/default.json" version "$(sosialhjelp-ci/bin/create-artifact-version.sh)" > deployment.yaml
            /app/deploy \
                --apikey="$NAIS_DEPLOY_APIKEY" \
                --cluster="prod-fss" \
                --repository="$CIRCLE_PROJECT_REPONAME" \
                --resource="nais.yaml" \
                --vars="deployment.yaml" \
                --wait=true

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - release:
          requires:
            - build